{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","itemAtual","result","dado","value","push","Negociacao","Date","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;IAAMA,a;AAEF,+BAAYC,UAAZ,EAAuB;AAAA;;AAEnB,qBAAKC,WAAL,GAAmBD,UAAnB;AACA,qBAAKE,MAAL,GAAc,aAAd;AACH;;;;yCAEQC,U,EAAW;AAAA;;AAElB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,oCAAIC,UAAU,MAAKN,WAAL,CACGO,WADH,CACe,CAAC,MAAKN,MAAN,CADf,EAC8B,WAD9B,EAEGO,WAFH,CAEe,MAAKP,MAFpB,EAGGQ,GAHH,CAGOP,UAHP,CAAd;;AAKAI,wCAAQI,SAAR,GAAoB,aAAK;;AAErBN,gDAAQ,qCAAR;AACH,iCAHD;;AAKAE,wCAAQK,OAAR,GAAkB,aAAK;;AAEnBC,gDAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,+CAAO,2BAAP;AACH,iCAJD;AAKD,yBAjBM,CAAP;AAkBD;;;6CAEW;AAAA;;AAEV,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,oCAAIY,SAAS,OAAKjB,WAAL,CACEO,WADF,CACc,CAAC,OAAKN,MAAN,CADd,EAC6B,WAD7B,EAEEO,WAFF,CAEc,OAAKP,MAFnB,EAGEiB,UAHF,EAAb;;AAKA,oCAAIC,cAAc,EAAlB;;AAEAF,uCAAOP,SAAP,GAAmB,aAAK;;AAEtB,4CAAIU,YAAYN,EAAEC,MAAF,CAASM,MAAzB;;AAEA,4CAAGD,SAAH,EAAa;;AAEX,oDAAIE,OAAOF,UAAUG,KAArB;AACAJ,4DAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASJ,KAAKK,KAAd,CAAf,EAAqCL,KAAKM,WAA1C,EAAuDN,KAAKO,MAA5D,CAAjB;AACAT,0DAAUU,QAAV;AAED,yCAND,MAMK;;AAEH1B,wDAAQe,WAAR;AACD;AACF,iCAdD;;AAgBAF,uCAAON,OAAP,GAAiB,aAAK;;AAEpBC,gDAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,+CAAO,wCAAP;AACD,iCAJD;AAMD,yBA/BM,CAAP;AAgCD;;;6CAEW;AAAA;;AAEV,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,oCAAIC,UAAU,OAAKN,WAAL,CACCO,WADD,CACa,CAAC,OAAKN,MAAN,CADb,EAC4B,WAD5B,EAECO,WAFD,CAEa,OAAKP,MAFlB,EAGC8B,KAHD,EAAd;;AAKAzB,wCAAQI,SAAR,GAAoB;AAAA,+CAAKN,QAAQ,mCAAR,CAAL;AAAA,iCAApB;;AAEAE,wCAAQK,OAAR,GAAkB,aAAK;AACrBN,+CAAOS,EAAEC,MAAF,CAASC,KAAhB;AACD,iCAFD;AAID,yBAbM,CAAP;AAcD","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao{\r\n\r\n    constructor(connection){\r\n\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao){\r\n\r\n      return new Promise((resolve, reject) => {\r\n\r\n        let request = this._connection\r\n                        .transaction([this._store], 'readwrite')\r\n                        .objectStore(this._store)\r\n                        .add(negociacao);\r\n                        \r\n        request.onsuccess = e => {\r\n\r\n            resolve('Negociacação cadastrada com sucesso');\r\n        }\r\n\r\n        request.onerror = e => {\r\n\r\n            console.log(e.target.error);\r\n            reject('Erro ao gravar negociacão');\r\n        }\r\n      });\r\n    }\r\n\r\n    listaTodos(){\r\n\r\n      return new Promise((resolve, reject) => {\r\n\r\n        let cursor = this._connection\r\n                      .transaction([this._store], 'readwrite')\r\n                      .objectStore(this._store)\r\n                      .openCursor();\r\n       \r\n        let negociacoes = [];\r\n\r\n        cursor.onsuccess = e => {\r\n\r\n          let itemAtual = e.target.result;\r\n\r\n          if(itemAtual){\r\n\r\n            let dado = itemAtual.value;\r\n            negociacoes.push(new Negociacao(new Date(dado._data), dado._quantidade, dado._valor));\r\n            itemAtual.continue();\r\n\r\n          }else{\r\n            \r\n            resolve(negociacoes);\r\n          }\r\n        };\r\n\r\n        cursor.onerror = e => {\r\n\r\n          console.log(e.target.error);\r\n          reject('Não foi possível listar as negociações');\r\n        };\r\n\r\n      });\r\n    }\r\n\r\n    apagaTodos(){\r\n\r\n      return new Promise((resolve, reject) => {\r\n\r\n        let request = this._connection\r\n                      .transaction([this._store], 'readwrite')\r\n                      .objectStore(this._store)\r\n                      .clear();\r\n\r\n        request.onsuccess = e => resolve('Negociações removidas com sucesso');\r\n\r\n        request.onerror = e => {\r\n          reject(e.target.error);\r\n        }\r\n\r\n      });\r\n    }\r\n}"]}