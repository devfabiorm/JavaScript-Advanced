{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","console","log","get","then","objetos","map","Negociacao","Date","objeto","data","quantidade","valor","catch","erro","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","arrays","reduce","arrayAchatado","array","concat","negociacao","ConnectionFactory","getConnection","NegociacaoDao","conexao","dao","adiciona","connection","listaTodos","listaAtual","obterNegociacoes","negociacoes","filter","some","isEquals","negociacaoExiste","apagaTodos","msg"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n    \r\n    constructor(){\r\n\r\n        this._http = new HttpService();\r\n    }\r\n    obterNegociacoesDaSemana() {\r\n        console.log(\"executei semana\");\r\n            return this._http.get(\"negociacoes/semana\")\r\n            .then(objetos => {\r\n                return objetos.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\r\n            })\r\n            .catch(erro => {console.log(erro);\r\n            throw new Error(\"Não foi possível obter as negociações da semana.\")\r\n            });\r\n\r\n            \r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n        console.log(\"executei semana passada\");\r\n        return this._http.get(\"negociacoes/anterior\")\r\n        .then(objetos => {\r\n            return objetos.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\r\n        })\r\n        .catch(erro => {console.log(erro);\r\n        throw new Error(\"Não foi possível obter as negociações da semana anterior.\")\r\n        });\r\n\r\n        \r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n        console.log(\"executei semana retrasada\");\r\n        return this._http.get(\"negociacoes/retrasada\")\r\n        .then(objetos => {\r\n            return objetos.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\r\n        })\r\n        .catch(erro => {console.log(erro);\r\n        throw new Error(\"Não foi possível obter as negociações da semana retrasada.\")\r\n        });\r\n    }\r\n\r\n    obterNegociacoes(){\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n            ])\r\n            .then(arrays => {\r\n\r\n                return arrays.reduce((arrayAchatado, array) => arrayAchatado.concat(array), [])\r\n            })\r\n            .catch(erro => { throw new Error(erro)\r\n        });\r\n\r\n    }\r\n\r\n    cadastra(negociacao){\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação cadastrada com sucesso')\r\n            .catch(() => {\r\n                throw new Error('Erro ao cadastrar negociacao')\r\n            });\r\n    }\r\n\r\n    lista(){\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Erro ao obter as negociações do IndexDB');\r\n            })\r\n    }\r\n\r\n    importa(listaAtual){\r\n\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => negociacoes.filter(negociacao =>\r\n                !listaAtual.some(negociacaoExiste => \r\n                    negociacao.isEquals(negociacaoExiste))))\r\n            .catch(erro => {\r\n                throw new Error(erro);\r\n            })\r\n    }\r\n\r\n    apaga(){\r\n\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(msg => msg)\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Erro ao apagar negociações')\r\n            });\r\n    }\r\n}"]}