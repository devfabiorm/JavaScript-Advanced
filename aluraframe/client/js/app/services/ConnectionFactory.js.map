{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["version","stores","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,mB,GAAU,C;AACVC,kB,GAAS,CAAC,aAAD,C;AACTC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,kB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AAEV,0BAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACH;;;;oDAEqB;;AAElB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BF,OAA9B,CAAlB;;AAEAU,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAAChB,UAAJ,EAAgB;AACZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,6CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,0DAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BAVD;;AAYAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAO,qBAAP;AACH,6BAJD;AAKH,yBA1BM,CAAP;AA2BH;;;kDAEoBN,U,EAAW;;AAE5BF,+BAAOwB,OAAP,CAAe,iBAAS;;AAEpB,gCAAGT,EAAEC,MAAF,CAASC,MAAT,CAAgBQ,gBAAhB,CAAiCC,QAAjC,CAA0CC,KAA1C,CAAH,EAAqDZ,EAAEC,MAAF,CAASC,MAAT,CAAgBW,iBAAhB,CAAkCD,KAAlC;;AAErDZ,8BAAEC,MAAF,CAASC,MAAT,CAAgBY,iBAAhB,CAAkCF,KAAlC;AACH,yBALD;AAMH;;;4CAEa;;AAEVxB;AACAD,qCAAa,IAAb;AACH","file":"ConnectionFactory.js","sourcesContent":["const version = 3;\r\nconst stores = ['negociacoes'];\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory{\r\n\r\n    constructor() {\r\n        \r\n        throw new Error('A classe ConnectionFactory não pode ser instanciada');\r\n    }\r\n\r\n    static getConnection(){\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n\r\n                ConnectionFactory._createStores(e.target.result);\r\n            }\r\n            \r\n            openRequest.onsuccess = e => {\r\n                \r\n                if(!connection) {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function(){\r\n                        throw new Error('Não é possível chamar o método close a partir da conexão');\r\n                    }\r\n                }\r\n                resolve(connection);\r\n            }\r\n            \r\n            openRequest.onerror = e => {\r\n\r\n                console.log(e.target.error);\r\n                reject(\"e.target.error.name\");\r\n            }\r\n        });\r\n    }\r\n    \r\n    static _createStores(connection){\r\n        \r\n        stores.forEach(store => {\r\n    \r\n            if(e.target.result.objectStoreNames.contains(store)) e.target.result.deleteObjectStore(store);\r\n    \r\n            e.target.result.createObjectStore(store);\r\n        });\r\n    }\r\n\r\n    static close(){\r\n\r\n        close();\r\n        connection = null;\r\n    }\r\n}"]}