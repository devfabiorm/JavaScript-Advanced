{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","version","stores","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAU;AAC/B,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,SAAQ,IAAZ;;AAEA;AACI,qCAAc;AAAA;;AAEV,kBAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM0B;;AAElB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BF,OAA9B,CAAlB;;AAEAS,gCAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAHD;;AAKAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,4BAAG,CAACf,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,qCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAU;AACzB,sCAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBAVD;;AAYAM,gCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAO,qBAAP;AACH,qBAJD;AAKH,iBA1BM,CAAP;AA2BH;AAnCL;AAAA;AAAA,0CAqCyBL,UArCzB,EAqCoC;;AAE5BF,uBAAOuB,OAAP,CAAe,iBAAS;;AAEpB,wBAAGT,EAAEC,MAAF,CAASC,MAAT,CAAgBQ,gBAAhB,CAAiCC,QAAjC,CAA0CC,KAA1C,CAAH,EAAqDZ,EAAEC,MAAF,CAASC,MAAT,CAAgBW,iBAAhB,CAAkCD,KAAlC;;AAErDZ,sBAAEC,MAAF,CAASC,MAAT,CAAgBY,iBAAhB,CAAkCF,KAAlC;AACH,iBALD;AAMH;AA7CL;AAAA;AAAA,oCA+CkB;;AAEVvB;AACAD,6BAAa,IAAb;AACH;AAnDL;;AAAA;AAAA;AAqDH,CA7DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function(){\r\n    const version = 3;\r\n    const stores = ['negociacoes'];\r\n    const dbName = 'aluraframe';\r\n\r\n    var connection = null;\r\n    var close = null;\r\n\r\n    return class ConnectionFactory{\r\n        constructor() {\r\n            \r\n            throw new Error('A classe ConnectionFactory não pode ser instanciada');\r\n        }\r\n\r\n        static getConnection(){\r\n\r\n            return new Promise((resolve, reject) => {\r\n\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                }\r\n                \r\n                openRequest.onsuccess = e => {\r\n                    \r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error('Não é possível chamar o método close a partir da conexão');\r\n                        }\r\n                    }\r\n                    resolve(connection);\r\n                }\r\n                \r\n                openRequest.onerror = e => {\r\n\r\n                    console.log(e.target.error);\r\n                    reject(\"e.target.error.name\");\r\n                }\r\n            });\r\n        }\r\n        \r\n        static _createStores(connection){\r\n            \r\n            stores.forEach(store => {\r\n        \r\n                if(e.target.result.objectStoreNames.contains(store)) e.target.result.deleteObjectStore(store);\r\n        \r\n                e.target.result.createObjectStore(store);\r\n            });\r\n        }\r\n\r\n        static close(){\r\n\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n})();"]}